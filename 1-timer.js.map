{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nconst inputData= document.querySelector('#datetime-picker')\nlet userSelectedDate=null;\nlet intervalId=null;\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate=selectedDates[0].getTime();\n        // console.log(userSelectedDate)\n    },\n};\n\nconst daysEl=document.querySelector('[data-days]');\nconst hoursEl=document.querySelector('[data-hours]');\nconst minsEl=document.querySelector('[data-minutes]');\nconst seconsEl=document.querySelector('[data-seconds]');\nconst startBtn=document.querySelector('button[data-start]');\n\n function updateTimer(){\n    const currentTime = Date.now();\n    const deltaTime=userSelectedDate - currentTime;\n    if (deltaTime<=0){\n        clearInterval(intervalId);\n        daysEl.textContent='00';\n        hoursEl.textContent='00';\n        minsEl.textContent='00';\n        seconsEl.textContent='00';\n        startBtn.disabled=false;\n        inputData.disabled=false;\n        return;\n    }\n    const{days, hours, minutes, seconds}=convert(deltaTime);\n    daysEl.textContent=pad(days);\n    hoursEl.textContent=pad(hours);\n    minsEl.textContent=pad(minutes);\n    seconsEl.textContent=pad(seconds);\n\n\n}\n\nfunction startTimer(){\n    if (!userSelectedDate || isNaN(userSelectedDate)) return;\n    const currentTime=Date.now();\n    if(userSelectedDate<=currentTime){\n        window.alert(\"Please choose a date in the future\");\n        return;\n    }\n    startBtn.disabled=true;\n    inputData.disabled=true;\n    updateTimer();\n    intervalId=setInterval(updateTimer,1000);\n}\n\nfunction convert(deltaTime){\n    const days=Math.floor((deltaTime%(1000*60*60*24*30))/(1000*60*60*24));\n\n    const hours=Math.floor((deltaTime%(1000*60*60*24))/(1000*60*60));\n\n    const minutes=Math.floor((deltaTime%(1000*60*60))/(1000*60));\n\n    const seconds=Math.floor((deltaTime%(1000*60))/1000);\nreturn {days, hours, minutes, seconds}\n}\n\nfunction pad(value){\n    return String(value).padStart(2,'0');\n}\n\n flatpickr(inputData,options)\n//  startBtn.disabled=true;\n startBtn.addEventListener('click',startTimer)\n\n\n\n\n\n\n"],"names":["inputData","userSelectedDate","intervalId","options","selectedDates","daysEl","hoursEl","minsEl","seconsEl","startBtn","updateTimer","currentTime","deltaTime","days","hours","minutes","seconds","convert","pad","startTimer","value","flatpickr"],"mappings":"oFAGA,MAAMA,EAAW,SAAS,cAAc,kBAAkB,EAC1D,IAAIC,EAAiB,KACjBC,EAAW,KACf,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBH,EAAiBG,EAAc,CAAC,EAAE,QAAO,CAE5C,CACL,EAEMC,EAAO,SAAS,cAAc,aAAa,EAC3CC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAO,SAAS,cAAc,gBAAgB,EAC9CC,EAAS,SAAS,cAAc,gBAAgB,EAChDC,EAAS,SAAS,cAAc,oBAAoB,EAEzD,SAASC,GAAa,CACnB,MAAMC,EAAc,KAAK,MACnBC,EAAUX,EAAmBU,EACnC,GAAIC,GAAW,EAAE,CACb,cAAcV,CAAU,EACxBG,EAAO,YAAY,KACnBC,EAAQ,YAAY,KACpBC,EAAO,YAAY,KACnBC,EAAS,YAAY,KACrBC,EAAS,SAAS,GAClBT,EAAU,SAAS,GACnB,MACH,CACD,KAAK,CAAC,KAAAa,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAEC,EAAQL,CAAS,EACtDP,EAAO,YAAYa,EAAIL,CAAI,EAC3BP,EAAQ,YAAYY,EAAIJ,CAAK,EAC7BP,EAAO,YAAYW,EAAIH,CAAO,EAC9BP,EAAS,YAAYU,EAAIF,CAAO,CAGpC,CAEA,SAASG,GAAY,CACjB,GAAI,CAAClB,GAAoB,MAAMA,CAAgB,EAAG,OAClD,MAAMU,EAAY,KAAK,MACvB,GAAGV,GAAkBU,EAAY,CAC7B,OAAO,MAAM,oCAAoC,EACjD,MACH,CACDF,EAAS,SAAS,GAClBT,EAAU,SAAS,GACnBU,IACAR,EAAW,YAAYQ,EAAY,GAAI,CAC3C,CAEA,SAASO,EAAQL,EAAU,CACvB,MAAMC,EAAK,KAAK,MAAOD,EAAW,OAAoB,KAAc,EAE9DE,EAAM,KAAK,MAAOF,GAAW,IAAK,GAAG,GAAG,KAAM,IAAK,GAAG,GAAG,EAEzDG,EAAQ,KAAK,MAAOH,GAAW,IAAK,GAAG,KAAM,IAAK,GAAG,EAErDI,EAAQ,KAAK,MAAOJ,GAAW,IAAK,IAAK,GAAI,EACvD,MAAO,CAAC,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACrC,CAEA,SAASE,EAAIE,EAAM,CACf,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAE,GAAG,CACvC,CAECC,EAAUrB,EAAUG,CAAO,EAE3BM,EAAS,iBAAiB,QAAQU,CAAU"}